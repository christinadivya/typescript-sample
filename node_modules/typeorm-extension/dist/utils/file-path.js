"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformFilePath = void 0;
const separator_1 = require("./separator");
const slash_1 = require("./slash");
const stripLeadingModifier = (text) => {
    if (text.startsWith('./')) {
        text = text.substring(2);
    }
    return text;
};
function transformFilePath(input, dist, src) {
    let base = input;
    let baseIndex = input.lastIndexOf('/');
    if (baseIndex !== -1) {
        base = base.substring(baseIndex + 1);
    }
    if (src) {
        src = (0, slash_1.withoutTrailingSlash)(stripLeadingModifier((0, separator_1.safeReplaceWindowsSeparator)(src)));
    }
    src = src || 'src';
    if (dist) {
        dist = (0, slash_1.withoutTrailingSlash)(stripLeadingModifier((0, separator_1.safeReplaceWindowsSeparator)(dist)));
    }
    dist = dist || 'dist';
    if (input.indexOf(src) !== -1 &&
        input.indexOf(dist) === -1) {
        const lastIndex = input.lastIndexOf(src);
        const prevCharacter = input.substring(lastIndex - 1, lastIndex);
        if (!prevCharacter || prevCharacter === '/') {
            input = input.substring(0, lastIndex) +
                dist +
                input.substring(lastIndex + src.length);
            baseIndex = input.lastIndexOf('/');
        }
    }
    // if the path already contains a js file extension, we are done
    const jsExtensions = ['js', 'cjs', 'mjs'];
    for (let i = 0; i < jsExtensions.length; i++) {
        if (base.indexOf(jsExtensions[i]) !== -1) {
            return input;
        }
    }
    const tsExtensions = ['ts', 'cts', 'mts'];
    for (let i = 0; i < tsExtensions.length; i++) {
        const regex = new RegExp(`(\\.${tsExtensions[i]}|${tsExtensions[i]})`, 'g');
        let matchesSum;
        const matches = base.match(regex);
        if (Array.isArray(matches)) {
            matchesSum = matches.length;
        }
        let matchesCounter = 0;
        const bracketIndex = base.lastIndexOf('{');
        base = base.replace(regex, (...args) => {
            matchesCounter++;
            // if the file extension name comes after the last bracket index,
            // we can be pretty sure that the extension name is not part of a filename
            if ((args[2] >= bracketIndex && bracketIndex !== -1) ||
                (bracketIndex === -1 && matchesCounter === matchesSum)) {
                return args[0].startsWith('.') ? `.${jsExtensions[i]}` : jsExtensions[i];
            }
            return args[0];
        });
    }
    if (baseIndex !== -1) {
        base = input.substring(0, baseIndex + 1) + base;
    }
    return stripLeadingModifier(base);
}
exports.transformFilePath = transformFilePath;
