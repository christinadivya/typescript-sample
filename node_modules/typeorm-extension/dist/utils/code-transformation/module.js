"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isCodeTransformation = exports.detectCodeTransformation = exports.setCodeTransformation = exports.isCodeTransformationValid = void 0;
const node_process_1 = __importDefault(require("node:process"));
const has_property_1 = require("../has-property");
const constants_1 = require("./constants");
const envKey = 'TYPEORM_EXTENSION_CODE_TRANSFORMATION';
function isCodeTransformationValid(input) {
    return input === constants_1.CodeTransformation.JUST_IN_TIME ||
        input === constants_1.CodeTransformation.NONE;
}
exports.isCodeTransformationValid = isCodeTransformationValid;
function setCodeTransformation(input) {
    if (isCodeTransformationValid(input)) {
        node_process_1.default.env[envKey] = input;
    }
}
exports.setCodeTransformation = setCodeTransformation;
function detectCodeTransformation() {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    if (node_process_1.default[Symbol.for('ts-node.register.instance')]) {
        return constants_1.CodeTransformation.JUST_IN_TIME;
    }
    if ((0, has_property_1.hasOwnProperty)(node_process_1.default.env, envKey)) {
        if (isCodeTransformationValid(node_process_1.default.env[envKey])) {
            return node_process_1.default.env[envKey];
        }
    }
    return constants_1.CodeTransformation.NONE;
}
exports.detectCodeTransformation = detectCodeTransformation;
function isCodeTransformation(input) {
    return detectCodeTransformation() === input;
}
exports.isCodeTransformation = isCodeTransformation;
