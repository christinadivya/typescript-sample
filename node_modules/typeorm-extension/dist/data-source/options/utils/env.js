"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeDataSourceOptionsWithEnv = exports.readDataSourceOptionsFromEnv = exports.hasEnvDataSourceOptions = void 0;
const env_1 = require("../../../env");
const merge_1 = require("./merge");
function hasEnvDataSourceOptions() {
    return !!(0, env_1.useEnv)('type');
}
exports.hasEnvDataSourceOptions = hasEnvDataSourceOptions;
/* istanbul ignore next */
function readDataSourceOptionsFromEnv() {
    if (!hasEnvDataSourceOptions()) {
        return undefined;
    }
    // todo: include seeder options
    const base = {
        type: (0, env_1.useEnv)('type'),
        entities: (0, env_1.useEnv)('entities'),
        subscribers: (0, env_1.useEnv)('subscribers'),
        migrations: (0, env_1.useEnv)('migrations'),
        migrationsTableName: (0, env_1.useEnv)('migrationsTableName'),
        // migrationsTransactionMode: useEnv('migra')
        metadataTableName: (0, env_1.useEnv)('metadataTableName'),
        logging: (0, env_1.useEnv)('logging'),
        logger: (0, env_1.useEnv)('logger'),
        maxQueryExecutionTime: (0, env_1.useEnv)('maxQueryExecutionTime'),
        synchronize: (0, env_1.useEnv)('synchronize'),
        migrationsRun: (0, env_1.useEnv)('migrationsRun'),
        dropSchema: (0, env_1.useEnv)('schemaDrop'),
        entityPrefix: (0, env_1.useEnv)('entityPrefix'),
        extra: (0, env_1.useEnv)('extra'),
        cache: (0, env_1.useEnv)('cache'),
    };
    const credentialOptions = {
        url: (0, env_1.useEnv)('url'),
        host: (0, env_1.useEnv)('host'),
        port: (0, env_1.useEnv)('port'),
        username: (0, env_1.useEnv)('username'),
        password: (0, env_1.useEnv)('password'),
        database: (0, env_1.useEnv)('database'),
    };
    if (base.type === 'mysql' || base.type === 'mariadb') {
        return {
            ...base,
            ...credentialOptions,
            type: base.type,
        };
    }
    if (base.type === 'postgres') {
        return {
            ...base,
            ...credentialOptions,
            type: base.type,
            schema: (0, env_1.useEnv)('schema'),
            uuidExtension: (0, env_1.useEnv)('uuidExtension'),
        };
    }
    if (base.type === 'cockroachdb') {
        return {
            ...base,
            ...credentialOptions,
            type: base.type,
            schema: (0, env_1.useEnv)('schema'),
            timeTravelQueries: true,
        };
    }
    if (base.type === 'sqlite') {
        return {
            ...base,
            type: base.type,
            database: (0, env_1.useEnv)('database') || 'db.sqlite',
        };
    }
    if (base.type === 'better-sqlite3') {
        return {
            ...base,
            type: base.type,
            database: (0, env_1.useEnv)('database') || 'db.sqlite',
        };
    }
    if (base.type === 'mssql') {
        return {
            ...base,
            ...credentialOptions,
            type: base.type,
            schema: (0, env_1.useEnv)('schema'),
        };
    }
    if (base.type === 'oracle') {
        return {
            ...base,
            ...credentialOptions,
            type: base.type,
            sid: (0, env_1.useEnv)('sid'),
        };
    }
    return {
        ...base,
        ...credentialOptions,
    };
}
exports.readDataSourceOptionsFromEnv = readDataSourceOptionsFromEnv;
function mergeDataSourceOptionsWithEnv(options) {
    const env = readDataSourceOptionsFromEnv();
    if (!env) {
        return options;
    }
    return (0, merge_1.mergeDataSourceOptions)(env, options);
}
exports.mergeDataSourceOptionsWithEnv = mergeDataSourceOptionsWithEnv;
