"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resetEnv = exports.useEnv = void 0;
const constants_1 = require("./constants");
const utils_1 = require("./utils");
let instance;
function useEnv(key) {
    if (typeof instance !== 'undefined') {
        if (typeof key === 'string') {
            return instance[key];
        }
        return instance;
    }
    const output = {
        env: (0, utils_1.readFromProcessEnv)(constants_1.EnvironmentVariableName.ENV, constants_1.EnvironmentName.DEVELOPMENT),
        // Seeder
        seeds: (0, utils_1.transformStringToArray)((0, utils_1.readFromProcessEnv)([
            constants_1.EnvironmentVariableName.SEEDS,
            constants_1.EnvironmentVariableName.SEEDS_ALT,
        ])),
        factories: (0, utils_1.transformStringToArray)((0, utils_1.readFromProcessEnv)([
            constants_1.EnvironmentVariableName.FACTORIES,
            constants_1.EnvironmentVariableName.FACTORIES_ALT,
        ])),
        // Database
        url: (0, utils_1.readFromProcessEnv)([
            constants_1.EnvironmentVariableName.URL,
            constants_1.EnvironmentVariableName.URL_ALT,
        ]),
        host: (0, utils_1.readFromProcessEnv)([
            constants_1.EnvironmentVariableName.HOST,
            constants_1.EnvironmentVariableName.HOST_ALT,
        ]),
        port: (0, utils_1.readIntFromProcessEnv)([
            constants_1.EnvironmentVariableName.PORT,
            constants_1.EnvironmentVariableName.PORT_ALT,
        ]),
        username: (0, utils_1.readFromProcessEnv)([
            constants_1.EnvironmentVariableName.USERNAME,
            constants_1.EnvironmentVariableName.USERNAME_ALT,
        ]),
        password: (0, utils_1.readFromProcessEnv)([
            constants_1.EnvironmentVariableName.PASSWORD,
            constants_1.EnvironmentVariableName.PASSWORD_ALT,
        ]),
        database: (0, utils_1.readFromProcessEnv)([
            constants_1.EnvironmentVariableName.DATABASE,
            constants_1.EnvironmentVariableName.DATABASE_ALT,
        ]),
        sid: (0, utils_1.readFromProcessEnv)([
            constants_1.EnvironmentVariableName.SID,
            constants_1.EnvironmentVariableName.SID_ALT,
        ]),
        schema: (0, utils_1.readFromProcessEnv)([
            constants_1.EnvironmentVariableName.SCHEMA,
            constants_1.EnvironmentVariableName.SCHEMA_ALT,
        ]),
        extra: (0, utils_1.readFromProcessEnv)([
            constants_1.EnvironmentVariableName.DRIVER_EXTRA,
            constants_1.EnvironmentVariableName.DRIVER_EXTRA_ALT,
        ]),
        synchronize: (0, utils_1.readBoolFromProcessEnv)([
            constants_1.EnvironmentVariableName.SYNCHRONIZE,
            constants_1.EnvironmentVariableName.SYNCHRONIZE_ALT,
        ]),
        schemaDrop: (0, utils_1.readBoolFromProcessEnv)([
            constants_1.EnvironmentVariableName.SCHEMA_DROP,
            constants_1.EnvironmentVariableName.SCHEMA_DROP_ALT,
        ]),
        migrationsRun: (0, utils_1.readBoolFromProcessEnv)([
            constants_1.EnvironmentVariableName.MIGRATIONS_RUN,
            constants_1.EnvironmentVariableName.MIGRATIONS_RUN_ALT,
        ]),
        entities: (0, utils_1.transformStringToArray)((0, utils_1.readFromProcessEnv)([
            constants_1.EnvironmentVariableName.ENTITIES,
            constants_1.EnvironmentVariableName.ENTITIES_ALT,
        ])),
        migrations: (0, utils_1.transformStringToArray)((0, utils_1.readFromProcessEnv)([
            constants_1.EnvironmentVariableName.MIGRATIONS,
            constants_1.EnvironmentVariableName.MIGRATIONS_ALT,
        ])),
        migrationsTableName: (0, utils_1.readFromProcessEnv)([
            constants_1.EnvironmentVariableName.MIGRATIONS_TABLE_NAME,
            constants_1.EnvironmentVariableName.MIGRATIONS_TABLE_NAME_ALT,
        ]),
        metadataTableName: (0, utils_1.readFromProcessEnv)([
            constants_1.EnvironmentVariableName.METADATA_TABLE_NAME,
            constants_1.EnvironmentVariableName.METADATA_TABLE_NAME_ALT,
        ]),
        subscribers: (0, utils_1.transformStringToArray)((0, utils_1.readFromProcessEnv)([
            constants_1.EnvironmentVariableName.SUBSCRIBERS,
            constants_1.EnvironmentVariableName.SUBSCRIBERS_ALT,
        ])),
        logging: (0, utils_1.transformLogging)((0, utils_1.readFromProcessEnv)([
            constants_1.EnvironmentVariableName.LOGGING,
            constants_1.EnvironmentVariableName.LOGGING_ALT,
        ])),
        logger: (0, utils_1.readFromProcessEnv)([
            constants_1.EnvironmentVariableName.LOGGER,
            constants_1.EnvironmentVariableName.LOGGER_ALT,
        ]),
        entityPrefix: (0, utils_1.readFromProcessEnv)([
            constants_1.EnvironmentVariableName.ENTITY_PREFIX,
            constants_1.EnvironmentVariableName.ENTITY_PREFIX_ALT,
        ]),
        maxQueryExecutionTime: (0, utils_1.readIntFromProcessEnv)([
            constants_1.EnvironmentVariableName.MAX_QUERY_EXECUTION_TIME,
            constants_1.EnvironmentVariableName.MAX_QUERY_EXECUTION_TIME_ALT,
        ]),
        debug: (0, utils_1.readFromProcessEnv)([
            constants_1.EnvironmentVariableName.DEBUG,
            constants_1.EnvironmentVariableName.DEBUG_ALT,
        ]),
        cache: (0, utils_1.transformCache)((0, utils_1.readFromProcessEnv)([
            constants_1.EnvironmentVariableName.CACHE,
            constants_1.EnvironmentVariableName.CACHE_ALT,
        ])),
        uuidExtension: (0, utils_1.readFromProcessEnv)([
            constants_1.EnvironmentVariableName.UUID_EXTENSION,
            constants_1.EnvironmentVariableName.UUID_EXTENSION_ALT,
        ]),
    };
    if (output.extra) {
        output.extra = JSON.parse(output.extra); // todo: ensure record<string,any> ??
    }
    let type;
    if ((0, utils_1.hasProcessEnv)([constants_1.EnvironmentVariableName.TYPE, constants_1.EnvironmentVariableName.TYPE_ALT])) {
        type = (0, utils_1.readFromProcessEnv)([constants_1.EnvironmentVariableName.TYPE, constants_1.EnvironmentVariableName.TYPE_ALT]);
    }
    else if ((0, utils_1.hasProcessEnv)([constants_1.EnvironmentVariableName.URL, constants_1.EnvironmentVariableName.URL_ALT])) {
        const temp = (0, utils_1.readFromProcessEnv)([constants_1.EnvironmentVariableName.URL, constants_1.EnvironmentVariableName.URL_ALT]);
        if (temp) {
            const parts = temp.split('://');
            if (parts.length > 0) {
                // eslint-disable-next-line prefer-destructuring
                type = parts[0];
            }
        }
    }
    if (type) {
        output.type = type; // todo: maybe validation here
    }
    instance = output;
    if (typeof key === 'string') {
        return output[key];
    }
    return instance;
}
exports.useEnv = useEnv;
function resetEnv() {
    if (typeof instance !== 'undefined') {
        instance = undefined;
    }
}
exports.resetEnv = resetEnv;
