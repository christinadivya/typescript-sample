"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformCache = exports.transformLogging = exports.transformStringToArray = exports.readBoolFromProcessEnv = exports.readIntFromProcessEnv = exports.readFromProcessEnv = exports.hasProcessEnv = void 0;
const node_process_1 = __importDefault(require("node:process"));
const utils_1 = require("../utils");
const constants_1 = require("./constants");
function hasProcessEnv(key) {
    const keys = Array.isArray(key) ? key : [key];
    for (let i = 0; i < keys.length; i++) {
        if ((0, utils_1.hasOwnProperty)(node_process_1.default.env, keys[i])) {
            return true;
        }
    }
    return false;
}
exports.hasProcessEnv = hasProcessEnv;
function readFromProcessEnv(key, alt) {
    const keys = Array.isArray(key) ? key : [key];
    for (let i = 0; i < keys.length; i++) {
        if ((0, utils_1.hasOwnProperty)(node_process_1.default.env, keys[i])) {
            return node_process_1.default.env[keys[i]];
        }
    }
    return alt;
}
exports.readFromProcessEnv = readFromProcessEnv;
function readIntFromProcessEnv(key, alt) {
    const keys = Array.isArray(key) ? key : [key];
    for (let i = 0; i < keys.length; i++) {
        const value = readFromProcessEnv(keys[i], alt);
        const intValue = parseInt(`${value}`, 10);
        if (!Number.isNaN(intValue)) {
            return intValue;
        }
    }
    return alt;
}
exports.readIntFromProcessEnv = readIntFromProcessEnv;
function extractBooleanFromString(input) {
    switch (input) {
        case true:
        case 'true':
        case 't':
        case '1':
            return true;
        case false:
        case 'false':
        case 'f':
        case '0':
            return false;
    }
    return undefined;
}
function readBoolFromProcessEnv(key, alt) {
    const keys = Array.isArray(key) ? key : [key];
    for (let i = 0; i < keys.length; i++) {
        const value = extractBooleanFromString(readFromProcessEnv(keys[i], alt));
        if (typeof value === 'boolean') {
            return value;
        }
    }
    return alt;
}
exports.readBoolFromProcessEnv = readBoolFromProcessEnv;
function transformStringToArray(input) {
    if (!input) {
        return [];
    }
    return input.split(',').map((el) => el.trim());
}
exports.transformStringToArray = transformStringToArray;
function transformLogging(input) {
    const value = extractBooleanFromString(input);
    if (typeof value === 'boolean') {
        return value;
    }
    if (value === 'all') {
        return 'all';
    }
    return transformStringToArray(value);
}
exports.transformLogging = transformLogging;
function transformCache(input) {
    const value = extractBooleanFromString(input);
    if (typeof value === 'boolean') {
        return value;
    }
    if (input === 'redis' ||
        input === 'ioredis' ||
        input === 'database' ||
        input === 'ioredis/cluster') {
        let options;
        if (hasProcessEnv([constants_1.EnvironmentVariableName.CACHE_OPTIONS, constants_1.EnvironmentVariableName.CACHE_OPTIONS_ALT])) {
            const temp = readFromProcessEnv([constants_1.EnvironmentVariableName.CACHE_OPTIONS, constants_1.EnvironmentVariableName.CACHE_OPTIONS_ALT]);
            if (temp) {
                options = JSON.parse(temp);
            }
        }
        return {
            type: input,
            options,
            alwaysEnabled: readBoolFromProcessEnv([
                constants_1.EnvironmentVariableName.CACHE_ALWAYS_ENABLED,
                constants_1.EnvironmentVariableName.CACHE_ALWAYS_ENABLED_ALT,
            ]),
            duration: readIntFromProcessEnv([
                constants_1.EnvironmentVariableName.CACHE_DURATION,
                constants_1.EnvironmentVariableName.CACHE_DURATION_ALT,
            ]),
        };
    }
    return undefined;
}
exports.transformCache = transformCache;
