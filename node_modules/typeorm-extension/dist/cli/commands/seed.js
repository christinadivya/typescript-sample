"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SeedCommand = void 0;
const data_source_1 = require("../../data-source");
const seeder_1 = require("../../seeder");
const utils_1 = require("../../utils");
class SeedCommand {
    constructor() {
        this.command = 'seed';
        this.describe = 'Populate the database with an initial data set or generated data by a factory.';
    }
    builder(args) {
        return args
            .option('codeTransformation', {
            default: utils_1.CodeTransformation.NONE,
            choices: [utils_1.CodeTransformation.NONE, utils_1.CodeTransformation.JUST_IN_TIME],
            describe: 'This option specifies how the code is transformed and how the library should behave as a result.',
        })
            .option('root', {
            alias: 'r',
            default: process.cwd(),
            describe: 'Path to the data-source / config file.',
        })
            .option('connection', {
            alias: 'c',
            default: 'default',
            describe: 'Name of the connection on which run a query.',
            deprecated: true,
        })
            .option('config', {
            alias: 'f',
            default: 'ormconfig',
            describe: 'Name of the file with the data-source configuration.',
            deprecated: true,
        })
            .option('dataSource', {
            alias: 'd',
            default: 'data-source',
            describe: 'Name of the file with the data-source.',
        })
            .option('seed', {
            alias: 's',
            describe: 'Specify the seed class to run.',
        });
    }
    async handler(raw, exitProcess = true) {
        const args = raw;
        if (args.codeTransformation) {
            (0, utils_1.setCodeTransformation)(args.codeTransformation);
        }
        const dataSourceOptions = await (0, data_source_1.buildDataSourceOptions)({
            name: args.connection,
            configName: args.config,
            directory: args.root,
            dataSourceName: args.dataSource,
        });
        (0, data_source_1.setDataSourceOptions)(dataSourceOptions);
        const dataSource = await (0, data_source_1.useDataSource)();
        await (0, seeder_1.runSeeders)(dataSource, {
            seedName: args.seed,
        });
        if (exitProcess) {
            process.exit(0);
        }
    }
}
exports.SeedCommand = SeedCommand;
